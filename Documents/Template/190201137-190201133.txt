/* ---------------------------------------------- */ 
namespace Core.Entities.Abstract
{
    public interface IDto
    {
    }
}
/* ---------------------------------------------- */ 
namespace Core.Entities.Abstract
{
    public interface IEntity
    {
    }
}
/* ---------------------------------------------- */ 
namespace Core.Utilities.Results
{
    public class DataResult<T> : Result, IDataResult<T>
    {
        protected DataResult(T data, bool success, string message) : base(success, message)
        {
            Data = data;
        }

        protected DataResult(T data, bool success) : base(success)
        {
            Data = data;
        }

        public T Data { get; }
    }
}
/* ---------------------------------------------- */ 
namespace Core.Utilities.Results
{
    public class ErrorDataResult<T> : DataResult<T>
    {
        public ErrorDataResult(T data, string message) : base(data, false, message)
        {
        }

        public ErrorDataResult(T data) : base(data, false)
        {
        }

        public ErrorDataResult(string message) : base(default, false, message)
        {
        }

        public ErrorDataResult() : base(default, false)
        {
        }
    }
}
/* ---------------------------------------------- */ 
namespace Core.Utilities.Results
{
    public class ErrorResult : Result
    {
        public ErrorResult(string message) : base(false, message)
        {
        }

        public ErrorResult() : base(false)
        {
        }
    }
}
/* ---------------------------------------------- */ 
namespace Core.Utilities.Results
{
    public interface IDataResult<out T> : IResult
    {
        T Data { get; }
    }
}
/* ---------------------------------------------- */ 
namespace Core.Utilities.Results
{
    public interface IResult
    {
        bool Success { get; }
        string Message { get; }
    }
}
/* ---------------------------------------------- */ 
namespace Core.Utilities.Results
{
    public class Result : IResult
    {
        protected Result(bool success, string message) : this(success)
        {
            Message = message;
        }

        protected Result(bool success)
        {
            Success = success;
        }

        public bool Success { get; }
        public string Message { get; }
    }
}
/* ---------------------------------------------- */ 
namespace Core.Utilities.Results
{
    public class SuccessDataResult<T> : DataResult<T>
    {
        public SuccessDataResult(T data, string message) : base(data, true, message)
        {
        }

        public SuccessDataResult(T data) : base(data, true)
        {
        }

        public SuccessDataResult(string message) : base(default, true, message)
        {
        }

        public SuccessDataResult() : base(default, true)
        {
        }
    }
}
/* ---------------------------------------------- */ 
namespace Core.Utilities.Results
{
    public class SuccessResult : Result
    {
        public SuccessResult(string message) : base(true, message)
        {
        }

        public SuccessResult() : base(true)
        {
        }
    }
}
/* ---------------------------------------------- */ 
using Core.Entities.Abstract;

namespace Entities.Concrete
{
    public class Coordinate : IEntity
    {
        public double lat { get; set; }
        public double lng { get; set; }
    }
}
/* ---------------------------------------------- */ 
using Core.Entities.Abstract;

namespace Entities.Concrete
{
    public class Location : IEntity
    {
        public string Borough { get; set; }
        public int LocationId { get; set; }
        public string Zone { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;

namespace Entities.Concrete
{
    public class Operation : IEntity
    {
        public int DOLocationID { get; set; }
        public int PULocationID { get; set; }
        public int passenger_count { get; set; }
        public decimal total_amount { get; set; }
        public decimal trip_distance { get; set; }
        public DateTime tpep_pickup_datetime { get; set; }
        public DateTime tpep_dropoff_datetime { get; set; }
    }
}
/* ---------------------------------------------- */ 
using Core.Entities.Abstract;

namespace Entities.Dto.Location
{
    public class LocationDto : IDto
    {
        public int LocationID { get; set; }
        public string Location { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;

namespace Entities.Dto.TypeOne
{
    public class TypeOne_ArticleOne : IDto
    {
        public DateTime PUDatetime { get; set; }
        public int passenger_count { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;

namespace Entities.Dto.TypeOne
{
    public class TypeOne_ArticleThree : IDto
    {
        public DateTime PUDatetime { get; set; }
        public decimal trip_distance { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;

namespace Entities.Dto.TypeOne
{
    public class TypeOne_ArticleTwo : IDto
    {
        public DateTime PUDatetime { get; set; }
        public decimal trip_distance { get; set; }
    }
}
/* ---------------------------------------------- */ 
using Core.Entities.Abstract;

namespace Entities.Dto.TypeOne
{
    public class TypeOne_ArticleTwo_Input : IDto
    {
        public decimal distance { get; set; }
    }
}
/* ---------------------------------------------- */ 
using Core.Entities.Abstract;

namespace Entities.Dto.TypeThree
{
    public class CoordinateDto : IDto
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}
/* ---------------------------------------------- */ 
using Entities.Dto.TypeThree;

namespace Entities.Dto.TypeTree
{
    public class row
    {
        public CoordinateDto PULocationCoordinate { get; set; }

        public CoordinateDto DOLocationCoordinate { get; set; }

        public string PULocation { get; set; }
        public string DOLocation { get; set; }
        public decimal trip_distance { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;
using Entities.Dto.TypeThree;

namespace Entities.Dto.TypeTree
{
    public class TypeThree_ArticleOne : IDto
    {
        public DateTime PUDatetime { get; set; }
        public DateTime DODatetime { get; set; }

        public CoordinateDto PULocationCoordinate { get; set; }

        public CoordinateDto DOLocationCoordinate { get; set; }

        public string PULocation { get; set; }
        public string DOLocation { get; set; }

        public decimal trip_distance { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;

namespace Entities.Dto.TypeTree
{
    public class TypeThree_ArticleOne_Input : IDto
    {
        public DateTime FirstDate { get; set; }
    }
}
/* ---------------------------------------------- */ 
using Core.Entities.Abstract;

namespace Entities.Dto.TypeTree
{
    public class TypeThree_ArticleThree : IDto
    {
        public row longest_trip { get; set; }
        public row shortest_trip { get; set; }
    }
}
/* ---------------------------------------------- */ 
using Core.Entities.Abstract;
using Entities.Dto.TypeThree;

namespace Entities.Dto.TypeTree
{
    public class TypeThree_ArticleTwo : IDto
    {
        public CoordinateDto PULocationCoordinate { get; set; }

        public CoordinateDto DOLocationCoordinate { get; set; }

        public string PULocation { get; set; }
        public string DOLocation { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;

namespace Entities.Dto.TypeTree
{
    public class TypeThree_ArticleTwo_Input : IDto
    {
        public DateTime FirstDate { get; set; }
        public int PULocationID { get; set; }
    }
}
/* ---------------------------------------------- */ 
using Core.Entities.Abstract;

namespace Entities.Dto.TypeTwo
{
    public class TypeTwo_ArticleOne : IDto
    {
        public int taxi_count { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;

namespace Entities.Dto.TypeTwo
{
    public class TypeTwo_ArticleOne_Input : IDto
    {
        public DateTime FirstDate { get; set; }
        public DateTime SecondDate { get; set; }
        public int PULocationID { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;

namespace Entities.Dto.TypeTwo
{
    public class TypeTwo_ArticleThree : IDto
    {
        public DateTime PUDatetime { get; set; }
        public DateTime DODatetime { get; set; }
        public decimal trip_distance { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;

namespace Entities.Dto.TypeTwo
{
    public class TypeTwo_ArticleThree_Input : IDto
    {
        public DateTime FirstDate { get; set; }
        public DateTime SecondDate { get; set; }
    }
}
/* ---------------------------------------------- */ 
using System;
using Core.Entities.Abstract;

namespace Entities.Dto.TypeTwo
{
    public class TypeTwo_ArticleTwo : IDto
    {
        public DateTime PUDatetime { get; set; }
        public decimal total_amount_average { get; set; }
    }
}
/* ---------------------------------------------- */ 
using Business.Abstract;
using Entities.Dto.TypeOne;
using Microsoft.AspNetCore.Mvc;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CacheController : ControllerBase
    {
        private IMemoryCacheService _memoryCacheService;

        public CacheController(IMemoryCacheService memoryCacheService)
        {
            _memoryCacheService = memoryCacheService;
        }

        [HttpGet]
        public IActionResult Index()
        {
            return Ok(_memoryCacheService.CacheRestore());

        }
    }
}
/* ---------------------------------------------- */ 
using Business.Abstract;
using Entities.Dto.TypeOne;
using Microsoft.AspNetCore.Mvc;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ExampleOneQueriesController : ControllerBase
    {
        private readonly IQueryExampleOneService _queryExampleOneService;

        public ExampleOneQueriesController(IQueryExampleOneService queryExampleOneService)
        {
            _queryExampleOneService = queryExampleOneService;
        }

        [HttpPost("queryOne")]
        public IActionResult QueryOne()
        {
            return Ok(_queryExampleOneService.QueryOne());
        }

        [HttpPost("queryTwo")]
        public IActionResult QueryTwo(TypeOne_ArticleTwo_Input input)
        {
            return Ok(_queryExampleOneService.QueryTwo(input));
        }

        [HttpPost("queryThree")]
        public IActionResult QueryThree()
        {
            return Ok(_queryExampleOneService.QueryThree());
        }
    }
}
/* ---------------------------------------------- */ 
using Business.Abstract;
using Entities.Dto.TypeTree;
using Microsoft.AspNetCore.Mvc;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ExampleThreeQueriesController : ControllerBase
    {
        private readonly IQueryExampleThreeService _queryExampleThreeService;


        public ExampleThreeQueriesController(IQueryExampleThreeService queryExampleThreeService)
        {
            _queryExampleThreeService = queryExampleThreeService;
        }

        [HttpPost("queryOne")]
        public IActionResult QueryOne(TypeThree_ArticleOne_Input input)
        {
            return Ok(_queryExampleThreeService.QueryOne(input));
        }

        [HttpPost("queryTwo")]
        public IActionResult QueryTwo(TypeThree_ArticleTwo_Input input)
        {
            return Ok(_queryExampleThreeService.QueryTwo(input));
        }

        [HttpPost("queryThree")]
        public IActionResult QueryThree()
        {
            return Ok(_queryExampleThreeService.QueryThree());
        }
    }
}
/* ---------------------------------------------- */ 
using Business.Abstract;
using Entities.Dto.TypeTwo;
using Microsoft.AspNetCore.Mvc;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ExampleTwoQueriesController : ControllerBase
    {
        private readonly IQueryExampleTwoService _queryExampleTwoService;

        public ExampleTwoQueriesController(IQueryExampleTwoService queryExampleTwoService)
        {
            _queryExampleTwoService = queryExampleTwoService;
        }


        [HttpPost("queryOne")]
        public IActionResult QueryOne(TypeTwo_ArticleOne_Input input)
        {
            return Ok(_queryExampleTwoService.QueryOne(input));
        }

        [HttpPost("queryTwo")]
        public IActionResult QueryTwo()
        {
            return Ok(_queryExampleTwoService.QueryTwo());
        }

        [HttpPost("queryThree")]
        public IActionResult QueryThree(TypeTwo_ArticleThree_Input input)
        {
            return Ok(_queryExampleTwoService.QueryThree(input));
        }
    }
}
/* ---------------------------------------------- */ 
using Business.Abstract;
using Microsoft.AspNetCore.Mvc;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class LocationController : ControllerBase
    {
        private readonly IQueryExampleLocationService _queryExampleLocationService;

        public LocationController(IQueryExampleLocationService queryExampleLocationService)
        {
            _queryExampleLocationService = queryExampleLocationService;
        }

        [HttpPost("all")]
        public IActionResult QueryOne()
        {
            return Ok(_queryExampleLocationService.GetAllLocation());
        }
    }
}
/* ---------------------------------------------- */ 
using DataAccess.Concrete.Firebase;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;

namespace WebAPI
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        private IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            FirebaseLocationDal.CreateLocationData();
            FirebaseOperationDal.CreateList();
            services.AddCors();
            services.AddControllers();

            services.AddSwaggerGen(c => { c.SwaggerDoc("v1", new OpenApiInfo {Title = "WebAPI", Version = "v1"}); });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "WebAPI v1"));
            }

            app.UseCors(builder => builder.WithOrigins("https://localhost:19006").AllowAnyHeader().AllowAnyOrigin());
            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints => { endpoints.MapControllers(); });
        }
    }
}
/* ---------------------------------------------- */ 
import React from "react";
import { createMaterialBottomTabNavigator } from "@react-navigation/material-bottom-tabs";
import MaterialCommunityIcons from "react-native-vector-icons/MaterialCommunityIcons";
import TypeOneStack from "./type-one-stack";
import TypeTwoStack from "./type-two-stack";
import TypeThreeStack from "./type-three-stack";

const Tabs = createMaterialBottomTabNavigator();

const BottomTabBar = () => {
  return (
    <Tabs.Navigator
      activeColor="#ede1e1"
      inactiveColor="#e37d7d"
      barStyle={{ backgroundColor: "#c93030" }}
    >
      <Tabs.Screen
        name="Tip 1"
        component={TypeOneStack}
        options={{
          tabBarLabel: "Tip 1",
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons
              name="android-auto"
              color={color}
              size={22}
            />
          ),
        }}
      />
      <Tabs.Screen
        name="Tip 2"
        component={TypeTwoStack}
        options={{
          tabBarLabel: "Tip 2",
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons
              name="android-auto"
              color={color}
              size={22}
            />
          ),
        }}
      />
      <Tabs.Screen
        name="Tip 3"
        component={TypeThreeStack}
        options={{
          tabBarLabel: "Tip 3",
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons
              name="android-auto"
              color={color}
              size={22}
            />
          ),
        }}
      />
    </Tabs.Navigator>
  );
};

export default BottomTabBar;

/* ---------------------------------------------- */ 
import React from "react";
import { createStackNavigator } from "@react-navigation/stack";
import MenuOne from "../page/page-one/menu";
import QueryOneOne from "../page/page-one/query-one";
import QueryOneTwo from "../page/page-one/query-two";
import QueryOneThree from "../page/page-one/query-three";

const TypeOne = createStackNavigator();

const TypeOneStack = () => {
  return (
    <TypeOne.Navigator initialRouteName="MenuOne">
      <TypeOne.Screen
        options={{ headerShown: false }}
        name="MenuOne"
        component={MenuOne}
      />
      <TypeOne.Screen
        options={{
          headerShown: true,
          title: "Madde 1",
          headerTintColor: "white",
          headerStyle: { backgroundColor: "#e85f5f" },
        }}
        name="QueryOneOne"
        component={QueryOneOne}
      />
      <TypeOne.Screen
        options={{
          headerShown: true,
          title: "Madde 2",
          headerTintColor: "white",
          headerStyle: { backgroundColor: "#e85f5f" },
        }}
        name="QueryOneTwo"
        component={QueryOneTwo}
      />
      <TypeOne.Screen
        options={{
          headerShown: true,
          title: "Madde 3",
          headerTintColor: "white",
          headerStyle: { backgroundColor: "#e85f5f" },
        }}
        name="QueryOneThree"
        component={QueryOneThree}
      />
    </TypeOne.Navigator>
  );
};
export default TypeOneStack;

/* ---------------------------------------------- */ 
import React from "react";
import { createStackNavigator } from "@react-navigation/stack";
import MenuThree from "../page/page-three/menu";
import QueryThreeOne from "../page/page-three/query-one";
import QueryThreeTwo from "../page/page-three/query-two";
import QueryThreeThree from "../page/page-three/query-three";

const TypeThree = createStackNavigator();

const TypeThreeStack = () => {
  return (
    <TypeThree.Navigator initialRouteName="MenuThree">
      <TypeThree.Screen
        options={{ headerShown: false, title: "Sorgular : Tip 3" }}
        name="MenuThree"
        component={MenuThree}
      />
      <TypeThree.Screen
        options={{
          headerShown: true,
          title: "Madde 1",
          headerTintColor: "white",
          headerStyle: { backgroundColor: "#e85f5f" },
        }}
        name="QueryThreeOne"
        component={QueryThreeOne}
      />
      <TypeThree.Screen
        options={{
          headerShown: true,
          title: "Madde 2",
          headerTintColor: "white",
          headerStyle: { backgroundColor: "#e85f5f" },
        }}
        name="QueryThreeTwo"
        component={QueryThreeTwo}
      />
      <TypeThree.Screen
        options={{
          headerShown: true,
          title: "Madde 3",
          headerTintColor: "white",
          headerStyle: { backgroundColor: "#e85f5f" },
        }}
        name="QueryThreeThree"
        component={QueryThreeThree}
      />
    </TypeThree.Navigator>
  );
};
export default TypeThreeStack;

/* ---------------------------------------------- */ 
import React from "react";
import { createStackNavigator } from "@react-navigation/stack";
import MenuTwo from "../page/page-two/menu";
import QueryTwoOne from "../page/page-two/query-one";
import QueryTwoTwo from "../page/page-two/query-two";
import QueryTwoThree from "../page/page-two/query-three";

const TypeTwo = createStackNavigator();

const TypeTwoStack = () => {
  return (
    <TypeTwo.Navigator initialRouteName="MenuTwo">
      <TypeTwo.Screen
        options={{ headerShown: false, title: "Sorgular : Tip 2" }}
        name="MenuTwo"
        component={MenuTwo}
      />
      <TypeTwo.Screen
        options={{
          headerShown: true,
          title: "Madde 1",
          headerTintColor: "white",
          headerStyle: { backgroundColor: "#e85f5f" },
        }}
        name="QueryTwoOne"
        component={QueryTwoOne}
      />
      <TypeTwo.Screen
        options={{
          headerShown: true,
          title: "Madde 2",
          headerTintColor: "white",
          headerStyle: { backgroundColor: "#e85f5f" },
        }}
        name="QueryTwoTwo"
        component={QueryTwoTwo}
      />
      <TypeTwo.Screen
        options={{
          headerShown: true,
          title: "Madde 3",
          headerTintColor: "white",
          headerStyle: { backgroundColor: "#e85f5f" },
        }}
        name="QueryTwoThree"
        component={QueryTwoThree}
      />
    </TypeTwo.Navigator>
  );
};
export default TypeTwoStack;

/* ---------------------------------------------- */ 
import React from "react";
import {
  View,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
} from "react-native";
import Constants from "expo-constants";
import Dimensions from "react-native";
import {
  Container,
  Header,
  Content,
  Card,
  CardItem,
  Text,
  Body,
} from "native-base";

const MenuOne = ({ navigation }) => {
  return (
    <Container style={styles.container}>
      <View style={styles.body}>
        <View style={styles.header}>
          <Card>
            <CardItem header style={{ backgroundColor: "#e85f5f" }}>
              <Text
                style={{ fontSize: 25, color: "white", fontWeight: "bold" }}
              >
                Sorgular : Tip 1
              </Text>
            </CardItem>
          </Card>
        </View>

        <ScrollView style={styles.scrollView}>
          <TouchableOpacity onPress={() => navigation.navigate("QueryOneOne")}>
            <Card>
              <CardItem header>
                <Text style={styles.hText}>1.Madde</Text>
              </CardItem>
              <CardItem>
                <Body>
                  <Text style={styles.text}>
                    En fazla yolcu taşınan 5 gün ve toplam yolcu sayıları
                  </Text>
                </Body>
              </CardItem>
            </Card>
          </TouchableOpacity>
          <TouchableOpacity onPress={() => navigation.navigate("QueryOneTwo")}>
            <Card>
              <CardItem header>
                <Text style={styles.hText}>2.Madde</Text>
              </CardItem>
              <CardItem>
                <Body>
                  <Text style={styles.text}>
                    Belirli mesafenin altında en çok seyahat yapılan gün ve
                    seyahat uzunluğu
                  </Text>
                </Body>
              </CardItem>
            </Card>
          </TouchableOpacity>
          <TouchableOpacity
            onPress={() => navigation.navigate("QueryOneThree")}
          >
            <Card>
              <CardItem header>
                <Text style={styles.hText}>3.Madde</Text>
              </CardItem>
              <CardItem>
                <Body>
                  <Text style={styles.text}>
                    En uzun mesafeli 5 yolculuktaki gün ve mesafeleri
                  </Text>
                </Body>
              </CardItem>
            </Card>
          </TouchableOpacity>
        </ScrollView>
      </View>
    </Container>
  );
};
export default MenuOne;

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: "#deded5",
  },
  body: {
    flex: 1,
    top: Constants.statusBarHeight,
    padding: 10,
    paddingBottom: 30,
  },
  header: {
    marginBottom: 10,
  },
  scrollView: {
    flex: 1,
    marginBottom: 10,
  },
  hText: {
    fontSize: 25,
    color: "#1c1c1b",
  },
  text: {
    fontSize: 22,
    color: "#1c1c1b",
  },
});

/* ---------------------------------------------- */ 
import React from "react";
import { StatusBar } from "expo-status-bar";
import { View, StyleSheet, ScrollView } from "react-native";
import {
  Container,
  Content,
  Card,
  CardItem,
  Text,
  Body,
  Spinner,
  Root,
} from "native-base";
import { Row, Grid } from "react-native-easy-grid";
import {
  Adresses,
  GetData,
  ParseDate,
  ShowToast,
} from "../../services/db-services";

export default class QueryOneOne extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: false,
      Data: null,
      dat: new Date(2020, 11, 1),
    };
  }

  componentDidMount() {
    this.Query();
  }

  Query = async () => {
    await this.setState({ loading: true });
    var result = await GetData(null, Adresses.TypeOne.One);
    if (result) {
      if (result.success) {
        this.setState({
          Data: result.data,
          loading: false,
        });
        ShowToast(result.message, "success");
      } else {
        this.setState({ loading: false });
        ShowToast(result.message, "danger");
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Servise Bağlanılamadı!", "danger");
    }
  };

  render() {
    return (
      <Root>
        <Container style={styles.container}>
          <Content style={styles.body}>
            <ScrollView style={styles.scrollView}>
              <View style={styles.header}>
                <Card>
                  <CardItem style={{ backgroundColor: "#e85f5f" }}>
                    <Body>
                      <Text
                        style={{
                          fontSize: 20,
                          color: "white",
                          fontWeight: "bold",
                        }}
                      >
                        En fazla yolcu taşınan 5 gün ve toplam yolcu sayıları
                      </Text>
                    </Body>
                  </CardItem>
                </Card>
              </View>

              <View style={{ flex: 1 }}>
                {this.state.Data != null &&
                  this.state.Data.map((p, key) => {
                    return (
                      <Card key={key}>
                        <CardItem header>
                          <Text style={{ fontSize: 20, fontWeight: "bold" }}>
                            {key + 1}. Kayıt
                          </Text>
                        </CardItem>
                        <CardItem>
                          <Body>
                            <Grid>
                              <Row>
                                <Text
                                  style={{
                                    marginBottom: 5,
                                    fontSize: 18,
                                    fontWeight: "bold",
                                  }}
                                >
                                  Yolcuların yolculuk ettiği tarih
                                </Text>
                              </Row>
                              <Row>
                                <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                  {ParseDate(new Date(p.puDatetime))}
                                </Text>
                              </Row>
                              <Row>
                                <Text
                                  style={{
                                    marginBottom: 5,
                                    fontSize: 18,
                                    fontWeight: "bold",
                                  }}
                                >
                                  Toplam yolcu sayısı{" "}
                                </Text>
                              </Row>
                              <Row>
                                <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                  {p.passenger_count}
                                </Text>
                              </Row>
                            </Grid>
                          </Body>
                        </CardItem>
                      </Card>
                    );
                  })}
              </View>
            </ScrollView>
            <StatusBar style="light" />
          </Content>
          {this.state.loading && (
            <View
              style={{
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                flex: 1,
                justifyContent: "center",
                alignItems: "center",
                backgroundColor: "rgba(0,0,0,0.2)",
              }}
            >
              <Spinner color="red" />
            </View>
          )}
        </Container>
      </Root>
    );
  }
}

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: "#deded5",
  },
  body: {
    flex: 1,
    padding: 10,
    paddingBottom: 30,
  },
  header: {
    marginBottom: 10,
  },
  scrollView: {
    flex: 1,
  },
});

/* ---------------------------------------------- */ 
import React from "react";
import { StatusBar } from "expo-status-bar";
import { View, StyleSheet, ScrollView } from "react-native";
import {
  Container,
  Card,
  CardItem,
  Text,
  Body,
  Spinner,
  Content,
  Root,
} from "native-base";
import { Row, Grid } from "react-native-easy-grid";
import { Adresses, GetData, ParseDate, ShowToast } from "../../services/db-services";

export default class QueryOneThree extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: false,
      Data: null,
    };
  }

  componentDidMount() {
    this.Query();
  }

  Query = async () => {
    await this.setState({ loading: true });
    var result = await GetData(null, Adresses.TypeOne.Three);
    if (result) {
      if (result.success) {
        this.setState({
          Data: result.data,
          loading: false,
        });
        this.setState({ loading: false });
        ShowToast(result.message,'success');
      } else {
        this.setState({ loading: false });
        ShowToast(result.message,'danger');
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Servise Bağlanılamadı.",'danger');
    }
  };

  render() {
    return (
      <Root>
        <Container style={styles.container}>
          <Content style={styles.body}>
            <ScrollView style={{ flex: 1 }}>
              <View style={styles.header}>
                <Card>
                  <CardItem style={{ backgroundColor: "#e85f5f" }}>
                    <Body>
                      <Text
                        style={{
                          fontSize: 20,
                          color: "white",
                          fontWeight: "bold",
                        }}
                      >
                        En uzun mesafeli 5 yolculuktaki gün ve mesafeleri
                      </Text>
                    </Body>
                  </CardItem>
                </Card>
              </View>
              <View style={{ flex: 1 }}>
                {this.state.Data != null &&
                  this.state.Data.map((p, key) => {
                    return (
                      <Card key={key}>
                        <CardItem header>
                          <Text style={{ fontSize: 20, fontWeight: "bold" }}>
                            {key + 1}. Kayıt
                          </Text>
                        </CardItem>
                        <CardItem>
                          <Body>
                            <Grid>
                              <Row>
                                <Text
                                  style={{
                                    marginBottom: 5,
                                    fontSize: 18,
                                    fontWeight: "bold",
                                  }}
                                >
                                  Yolculuk Edilen Tarih
                                </Text>
                              </Row>
                              <Row>
                                <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                  {ParseDate(new Date(p.puDatetime))}
                                </Text>
                              </Row>
                              <Row>
                                <Text
                                  style={{
                                    marginBottom: 5,
                                    fontSize: 18,
                                    fontWeight: "bold",
                                  }}
                                >
                                  Yolculuk Mesafesi{" "}
                                </Text>
                              </Row>
                              <Row>
                                <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                  {p.trip_distance} Mil
                                </Text>
                              </Row>
                            </Grid>
                          </Body>
                        </CardItem>
                      </Card>
                    );
                  })}
              </View>
            </ScrollView>
          </Content>
          {this.state.loading && (
            <View
              style={{
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                flex: 1,
                justifyContent: "center",
                alignItems: "center",
                backgroundColor: "rgba(0,0,0,0.2)",
              }}
            >
              <Spinner color="red" />
            </View>
          )}
          <StatusBar style="light" />
        </Container>
      </Root>
    );
  }
}

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: "#deded5",
  },
  body: {
    flex: 1,
    padding: 10,
    paddingBottom: 30,
  },
  header: {
    marginBottom: 10,
  },
});

/* ---------------------------------------------- */ 
import React, { useEffect } from "react";
import { StatusBar } from "expo-status-bar";
import { View, StyleSheet, ScrollView } from "react-native";
import {
  Container,
  Card,
  CardItem,
  Text,
  Body,
  Item,
  Input,
  Button,
  Form,
  Spinner,
  Content,
  Root,
} from "native-base";
import { Row, Grid } from "react-native-easy-grid";
import {
  Adresses,
  GetData,
  ParseDate,
  ShowToast,
} from "../../services/db-services";
import Icon from "react-native-vector-icons/FontAwesome";

export default class QueryOneTwo extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: false,
      Data: null,
      inputData: {
        distance: "",
      },
    };
  }

  Query = async () => {
    await this.setState({ loading: true });
    if (this.state.inputData.distance.length != 0) {
      var result = await GetData(this.state.inputData, Adresses.TypeOne.Two);
      if (result) {
        if (result.success) {
          this.setState({
            Data: result.data,
            loading: false,
          });
          ShowToast(result.message, "success");
        } else {
          this.setState({ loading: false });
          ShowToast(result.message, "danger");
        }
      } else {
        this.setState({ loading: false });
        ShowToast("Servise Bağlanılamadı.", "danger");
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Bir Mesafe değeri girmelisiniz.", "warning");
    }
  };

  render() {
    return (
      <Root>
        <Container style={styles.container}>
          <Content style={styles.body}>
            <ScrollView style={{ flex: 1 }}>
              <View style={styles.header}>
                <Card>
                  <CardItem
                    header
                    style={{
                      backgroundColor: "#e85f5f",
                      flexDirection: "column",
                    }}
                  >
                    <Body>
                      <Text
                        style={{
                          fontSize: 20,
                          color: "white",
                          fontWeight: "bold",
                        }}
                      >
                        Belirli mesafenin altında en çok seyahat yapılan 5 gün
                        ve seyahat uzunlukları
                      </Text>
                    </Body>
                  </CardItem>
                </Card>
                <Card>
                  <CardItem
                    header
                    style={{
                      backgroundColor: "#e85f5f",
                      flexDirection: "column",
                    }}
                  >
                    <Body>
                      <Text
                        style={{
                          fontSize: 18,
                          color: "white",
                          fontWeight: "bold",
                        }}
                      >
                        Mesafe Giriniz :
                      </Text>
                      <Form style={{ alignSelf: "stretch" }}>
                        <Item full style={{ marginBottom: 10, marginLeft: 0 }}>
                          <Icon
                            color="white"
                            style={{ fontSize: 30 }}
                            name="road"
                          />
                          <Input
                            style={{
                              color: "white",
                              fontSize: 18,
                              marginLeft: 5,
                            }}
                            keyboardType="number-pad"
                            onChangeText={(dist) => {
                              this.setState({ inputData: { distance: dist } });
                            }}
                            placeholderTextColor="white"
                            placeholder="Mesafe"
                          />
                        </Item>
                        <Button
                          full
                          style={{ backgroundColor: "#FFF" }}
                          onPress={() => this.Query()}
                        >
                          <Text
                            style={{
                              color: "#e85f5f",
                              fontSize: 18,
                              fontWeight: "bold",
                            }}
                          >
                            Sorgula
                          </Text>
                        </Button>
                      </Form>
                    </Body>
                  </CardItem>
                </Card>
              </View>

              <View style={{ flex: 1 }}>
                {this.state.Data != null &&
                  this.state.Data.map((p, key) => {
                    return (
                      <Card key={key}>
                        <CardItem header>
                          <Text style={{ fontSize: 20, fontWeight: "bold" }}>
                            {key + 1}. Kayıt
                          </Text>
                        </CardItem>
                        <CardItem>
                          <Body>
                            <Grid>
                              <Row>
                                <Text
                                  style={{
                                    marginBottom: 5,
                                    fontSize: 18,
                                    fontWeight: "bold",
                                  }}
                                >
                                  Yolculuk Edilen Gün
                                </Text>
                              </Row>
                              <Row>
                                <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                  {ParseDate(new Date(p.puDatetime))}
                                </Text>
                              </Row>
                              <Row>
                                <Text
                                  style={{
                                    marginBottom: 5,
                                    fontSize: 18,
                                    fontWeight: "bold",
                                  }}
                                >
                                  Yolculuk Mesafesi{" "}
                                </Text>
                              </Row>
                              <Row>
                                <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                  {p.trip_distance} Mil
                                </Text>
                              </Row>
                            </Grid>
                          </Body>
                        </CardItem>
                      </Card>
                    );
                  })}
              </View>
            </ScrollView>
          </Content>
          {this.state.loading && (
            <View
              style={{
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                flex: 1,
                justifyContent: "center",
                alignItems: "center",
                backgroundColor: "rgba(0,0,0,0.2)",
              }}
            >
              <Spinner color="red" />
            </View>
          )}
          <StatusBar style="light" />
        </Container>
      </Root>
    );
  }
}

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: "#deded5",
  },
  body: {
    flex: 1,
    padding: 10,
    paddingBottom: 30,
  },
  header: {
    marginBottom: 10,
  },
});

/* ---------------------------------------------- */ 
import React from 'react';
import { View, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';
import Constants from 'expo-constants';
import Dimensions  from 'react-native';
import { Container, Header, Content, Card, CardItem, Text, Body } from 'native-base';

const MenuThree = ({navigation}) =>{
    return (
        <Container style={styles.container}>
            <View  style={styles.body}>   
                
                <View style={styles.header}>
                    <TouchableOpacity>
                    <Card>
                        <CardItem header style={{backgroundColor:'#e85f5f'}}>
                            <Text style={{fontSize:25, color:'white', fontWeight:'bold'}}>Sorgular : Tip 3</Text>
                        </CardItem>
                    </Card>
                    </TouchableOpacity>
                </View>
                
                <ScrollView style={styles.scrollView}>
                    <TouchableOpacity onPress={() => navigation.navigate("QueryThreeOne")}>
                    <Card>
                        <CardItem header>
                            <Text style={styles.hText}>1.Madde</Text>
                        </CardItem>
                        <CardItem>
                            <Body>
                                <Text style={styles.text}>Belirli bir günde en uzun seyahatin harita üstünde yolunun çizilmesi</Text>
                            </Body>
                        </CardItem>
                    </Card>
                    </TouchableOpacity>
                    <TouchableOpacity onPress={() => navigation.navigate("QueryThreeTwo")}>
                    <Card>
                        <CardItem header>
                        <Text style={styles.hText}>2.Madde</Text>
                        </CardItem>
                        <CardItem>
                            <Body>
                            <Text style={styles.text}>Belirli bir günde aynı konumdan hareket eden araçların rasgele 5’inin yolunun çizilmesi</Text>
                            </Body>
                        </CardItem>
                    </Card>
                    </TouchableOpacity>
                    <TouchableOpacity onPress={() => navigation.navigate("QueryThreeThree")}>
                    <Card>
                        <CardItem header>
                        <Text style={styles.hText}>3.Madde</Text>
                        </CardItem>
                        <CardItem>
                            <Body>
                            <Text style={styles.text}>En az 3 yolcunun bulunduğu seyahatlerden en kısa mesafeli ve en uzun mesafeli yolun çizilmesi</Text>
                            </Body>
                        </CardItem>
                    </Card>
                    </TouchableOpacity>

                </ScrollView>

            </View>
        </Container>
    );
};
export default MenuThree;

const styles = new StyleSheet.create({
    container:{
        flex:1,
        flexDirection:'row',
        justifyContent:'center',
        alignItems:'center',
        backgroundColor:'#deded5'
    },
    body:{ 
        flex:1,
        top:Constants.statusBarHeight,  
        padding:10,
        paddingBottom:30,
    },
    header:{
        marginBottom:10,
    },
    scrollView:{ 
        flex:1,
        marginBottom:10,
    },
    hText:{
        fontSize:25,
        color:'#1c1c1b'
    },
    text:{
        fontSize:22,
        color:'#1c1c1b'
    },
});


/* ---------------------------------------------- */ 
import React from "react";
import { StatusBar } from "expo-status-bar";
import { View, StyleSheet, Modal } from "react-native";
import {
  Container,
  Card,
  CardItem,
  Text,
  Body,
  Button,
  Form,
  Item,
  Input,
  Content,
  Spinner,
  Root,
} from "native-base";
import MapView, { PROVIDER_GOOGLE, Marker } from "react-native-maps";
import {
  Adresses,
  GetData,
  ParseDate,
  GOOGLE_MAPS_APIKEY,
  ShowToast,
} from "../../services/db-services";
import MapViewDirections from "react-native-maps-directions";
import DateTimePicker from "@react-native-community/datetimepicker";
import Icon from "react-native-vector-icons/FontAwesome";

export default class QueryThreeOne extends React.Component {
  constructor(props) {
    super(props);
    this.mapRef = null;
    this.state = {
      inputData: {},
      Data: null,
      date: new Date("2020-12-01"),
      showDatePicker: false,
      modalShown: false,
    };
    this.setDate = this.setDate.bind(this);
  }

  showModal(visible) {
    this.setState({ modalShown: visible });
  }

  Query = async () => {
    await this.setState({
      loading: true,
      inputData: { firstDate: this.state.date },
    });
    var result = await GetData(this.state.inputData, Adresses.TypeThree.One);

    if (result) {
      if (result.success) {
        await this.setState({
          Data: result.data,
          loading: false
        });
        this.showModal(true);
        ShowToast(result.message, "success");
        return true;
      } else {
        this.setState({ loading: false });
        ShowToast(result.message, "danger");
        return true;
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Servise Bağlanılamadı!", "danger");
      return false;
    }
  };

  fitToMarkers = () => {
    this.mapRef.fitToCoordinates(
      [
        this.state.Data[0].puLocationCoordinate,
        this.state.Data[0].doLocationCoordinate,
      ],
      {
        edgePadding: { top: 150, right: 150, bottom: 150, left: 150 },
        animated: true,
      }
    );
  };

  showMode = () => {
    this.setState({ showDatePicker: true });
  };

  setDate(e, newDate) {
    const currentDate = newDate || new Date("2020-12-01");
    this.setState({ date: currentDate, showDatePicker: false });
  }

  render() {
    return (
      <Root>
        <Container style={styles.container}>
          <Content style={styles.body}>
            <View style={styles.header}>
              <Card>
                <CardItem style={{ backgroundColor: "#e85f5f" }}>
                  <Body>
                    <Text
                      style={{
                        fontSize: 20,
                        color: "white",
                        fontWeight: "bold",
                      }}
                    >
                      Belirli bir günde en uzun seyahatin harita üstünde yolunun
                      çizilmesi
                    </Text>
                  </Body>
                </CardItem>
              </Card>
              <Card>
                <CardItem style={{ backgroundColor: "#e85f5f" }}>
                  <Body>
                    <Form style={{ alignSelf: "stretch" }}>
                      <Text
                        style={{
                          fontSize: 20,
                          color: "white",
                          fontWeight: "bold",
                        }}
                      >
                        Tarih seçiniz :
                      </Text>
                      <Item full style={{ marginBottom: 10, marginLeft: 0 }}>
                        <Icon
                          color="white"
                          style={{ fontSize: 30 }}
                          name="calendar"
                        />
                        <Input
                          style={{
                            color: "white",
                            fontSize: 18,
                            marginLeft: 10,
                          }}
                          value={ParseDate(this.state.date)}
                          placeholderTextColor="white"
                          placeholder="Tarih"
                        />
                      </Item>
                      <Button
                        full
                        style={{ backgroundColor: "#FFF", marginBottom: 10 }}
                        onPress={() => this.showMode()}
                      >
                        <Text
                          style={{
                            color: "#e85f5f",
                            fontSize: 18,
                            fontWeight: "bold",
                          }}
                        >
                          Tarih Seç
                        </Text>
                      </Button>
                      <Button
                        full
                        style={{ backgroundColor: "#FFF" }}
                        onPress={() => this.Query()}
                      >
                        <Text
                          style={{
                            color: "#e85f5f",
                            fontSize: 18,
                            fontWeight: "bold",
                          }}
                        >
                          Görüntüle
                        </Text>
                      </Button>
                    </Form>
                  </Body>
                </CardItem>
              </Card>
            </View>
            <View style={{ width: "100%", height: "100%" }}>
              {this.state.modalShown && (
                <Modal
                  animationType="slide"
                  transparent={true}
                  visible={this.state.modalShown}
                  onRequestClose={() => {
                    this.mapRef = null;
                    this.setState({ modalShown: false });
                  }}
                >
                  <MapView
                    ref={(ref) => {
                      this.mapRef = ref;
                    }}
                    provider={PROVIDER_GOOGLE}
                    style={{ width: "100%", height: "100%" }}
                    onMapReady={() => this.fitToMarkers()}
                  >
                    <MapViewDirections
                      origin={this.state.Data[0].puLocationCoordinate}
                      destination={this.state.Data[0].doLocationCoordinate}
                      apikey={GOOGLE_MAPS_APIKEY}
                      strokeWidth={3}
                      strokeColor="red"
                    />

                    <Marker
                      pinColor={"blue"}
                      coordinate={this.state.Data[0].puLocationCoordinate}
                      title={"Başlagıç Konumu"}
                      description={this.state.Data[0].puLocation}
                    />
                    <Marker
                      pinColor={"red"}
                      coordinate={this.state.Data[0].doLocationCoordinate}
                      title={"Varış Konumu"}
                      description={this.state.Data[0].doLocation}
                    />
                  </MapView>
                </Modal>
              )}
            </View>
          </Content>
          {this.state.showDatePicker && (
            <DateTimePicker
              defaultDate={new Date("2020-12-01")}
              minimumDate={new Date("2020-12-01")}
              maximumDate={new Date("2020-12-31")}
              testID="Date"
              value={this.state.date}
              mode="date"
              is24Hour={true}
              display="spinner"
              onChange={this.setDate}
            />
          )}
          {this.state.loading && (
            <View
              style={{
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                flex: 1,
                justifyContent: "center",
                alignItems: "center",
                backgroundColor: "rgba(0,0,0,0.2)",
              }}
            >
              <Spinner color="red" />
            </View>
          )}
          <StatusBar style="light" />
        </Container>
      </Root>
    );
  }
}

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: "#deded5",
    height: "100%",
  },
  body: {
    flex: 1,
    padding: 10,
    height: "100%",
  },
  header: {
    marginBottom: 10,
  },
});

/* ---------------------------------------------- */ 
import React from "react";
import { StatusBar } from "expo-status-bar";
import { View, StyleSheet, Modal } from "react-native";
import {
  Container,
  Card,
  CardItem,
  Text,
  Body,
  Button,
  Content,
  Spinner,
  Root,
} from "native-base";
import MapView, { PROVIDER_GOOGLE, Marker } from "react-native-maps";
import {
  Adresses,
  GetData,
  GOOGLE_MAPS_APIKEY,
  ShowToast,
} from "../../services/db-services";
import MapViewDirections from "react-native-maps-directions";

export default class QueryThreeThree extends React.Component {
  constructor(props) {
    super(props);
    this.mapRef = null;
    this.state = {
      LocationInfo: null,
      Data: null,
      inputData: null,
      date: new Date("2020-12-01"),
      showDatePicker: false,
      modalShown: false,
      selectedLocation: "0",
      puLocationID: 0,
      colors: [
        "red",
        "olive",
        "fuchsia",
        "black",
        "orange",
        "navy",
        "maroon",
        "purple",
        "green",
        "teal",
      ],
    };
  }

  componentDidMount() {
    this.Query();
  }

  showModal(visible) {
    this.setState({ modalShown: visible });
  }

  Query = async () => {
    await this.setState({ loading: true });
    var result = await GetData(this.state.inputData, Adresses.TypeThree.Three);
    if (result) {
      if (result.success) {
        this.setState({
          Data: result.data,
          loading: false,
        });
        ShowToast(result.success, "success");
        this.showModal(true);
      } else {
        this.setState({ loading: false });
        ShowToast(result.success, "danger");
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Servise Bağlanılamadı!", "danger");
    }
  };

  fitToMarkers = () => {
    var temp = [];
    temp.push(this.state.Data[0]["longest_trip"].puLocationCoordinate);
    temp.push(this.state.Data[0]["longest_trip"].doLocationCoordinate);
    temp.push(this.state.Data[0]["shortest_trip"].puLocationCoordinate);
    temp.push(this.state.Data[0]["shortest_trip"].doLocationCoordinate);
    this.mapRef.fitToCoordinates(temp, {
      edgePadding: { top: 150, right: 150, bottom: 150, left: 150 },
      animated: true,
    });
  };

  render() {
    return (
      <Root>
      <Container style={styles.container}>
        <Content style={styles.body}>
          <View style={styles.header}>
            <Card>
              <CardItem style={{ backgroundColor: "#e85f5f" }}>
                <Body>
                  <Text
                    style={{ fontSize: 20, color: "white", fontWeight: "bold" }}
                  >
                    En az 3 yolcunun bulunduğu seyahatlerden en kısa mesafeli ve
                    en uzun mesafeli yolun çizilmesi
                  </Text>
                </Body>
              </CardItem>
            </Card>
            <Card>
              <CardItem style={{ backgroundColor: "#e85f5f" }}>
                <Body>
                  <Button
                    full
                    style={{ backgroundColor: "#FFF" }}
                    onPress={() => this.Query()}
                  >
                    <Text
                      style={{
                        color: "#e85f5f",
                        fontSize: 18,
                        fontWeight: "bold",
                      }}
                    >
                      Görüntüle
                    </Text>
                  </Button>
                </Body>
              </CardItem>
            </Card>
          </View>
          <View style={{ width: "100%", height: "100%" }}>
            {this.state.modalShown && this.state.Data.length != 0 && (
              <Modal
                animationType="slide"
                transparent={true}
                visible={this.state.modalShown}
                onRequestClose={() => {
                  this.mapRef = null;
                  this.setState({ modalShown: false });
                }}
              >
                <MapView
                  ref={(ref) => {
                    this.mapRef = ref;
                  }}
                  provider={PROVIDER_GOOGLE}
                  style={{ width: "100%", height: "100%" }}
                  onMapReady={() => this.fitToMarkers()}
                >
                  <View>
                    <MapViewDirections
                      origin={
                        this.state.Data[0]["longest_trip"].puLocationCoordinate
                      }
                      destination={
                        this.state.Data[0]["longest_trip"].doLocationCoordinate
                      }
                      apikey={GOOGLE_MAPS_APIKEY}
                      strokeWidth={3}
                      strokeColor={
                        this.state.colors[
                          Math.floor(Math.random() * this.state.colors.length)
                        ]
                      }
                    />
                    <Marker
                      pinColor={"blue"}
                      coordinate={
                        this.state.Data[0]["longest_trip"].puLocationCoordinate
                      }
                      title={"Başlangıç Komunu"}
                      description={
                        this.state.Data[0]["longest_trip"].puLocation
                      }
                    />
                    <Marker
                      pinColor={"red"}
                      coordinate={
                        this.state.Data[0]["longest_trip"].doLocationCoordinate
                      }
                      title={"Varış Konumu"}
                      description={
                        this.state.Data[0]["longest_trip"].doLocation
                      }
                    />
                  </View>
                  <View>
                    <MapViewDirections
                      origin={
                        this.state.Data[0]["shortest_trip"].puLocationCoordinate
                      }
                      destination={
                        this.state.Data[0]["shortest_trip"].doLocationCoordinate
                      }
                      apikey={GOOGLE_MAPS_APIKEY}
                      strokeWidth={3}
                      strokeColor={
                        this.state.colors[
                          Math.floor(Math.random() * this.state.colors.length)
                        ]
                      }
                    />
                    <Marker
                      pinColor={"blue"}
                      coordinate={
                        this.state.Data[0]["shortest_trip"].puLocationCoordinate
                      }
                      title={"Başlangıç Konumu"}
                      description={
                        this.state.Data[0]["shortest_trip"].puLocation
                      }
                    />
                    <Marker
                      coordinate={
                        this.state.Data[0]["shortest_trip"].doLocationCoordinate
                      }
                      title={"Varış Konumu"}
                      description={
                        this.state.Data[0]["shortest_trip"].doLocation
                      }
                    />
                  </View>
                </MapView>
              </Modal>
            )}
          </View>
        </Content>
        {this.state.loading && (
          <View
            style={{
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              flex: 1,
              justifyContent: "center",
              alignItems: "center",
              backgroundColor: "rgba(0,0,0,0.2)",
            }}
          >
            <Spinner color="red" />
          </View>
        )}
        <StatusBar style="light" />
      </Container>
      </Root>
    );
  }
}

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: "#deded5",
    height: "100%",
  },
  body: {
    flex: 1,
    padding: 10,
    height: "100%",
  },
  header: {
    marginBottom: 10,
  },
});

/* ---------------------------------------------- */ 
import React from "react";
import { StatusBar } from "expo-status-bar";
import { View, StyleSheet, Modal } from "react-native";
import {
  Container,
  Card,
  CardItem,
  Text,
  Body,
  Button,
  Form,
  Item,
  Input,
  Content,
  Picker,
  Spinner,
  Root,
} from "native-base";
import MapView, { PROVIDER_GOOGLE, Marker } from "react-native-maps";
import {
  Adresses,
  GetData,
  ParseDate,
  GOOGLE_MAPS_APIKEY,
  ShowToast,
} from "../../services/db-services";
import MapViewDirections from "react-native-maps-directions";
import DateTimePicker from "@react-native-community/datetimepicker";
import Icon from "react-native-vector-icons/FontAwesome";

export default class QueryThreeTwo extends React.Component {
  constructor(props) {
    super(props);
    this.mapRef = null;
    this.state = {
      LocationInfo: {},
      Data: null,
      inputData: {},
      firstDate: new Date("2020-12-01"),
      showDatePicker: false,
      modalShown: false,
      selectedLocation: "0",
      puLocationID: 0,
      colors: [
        "red",
        "olive",
        "fuchsia",
        "black",
        "orange",
        "navy",
        "maroon",
        "purple",
        "green",
        "teal",
      ],
    };
    this.setDate = this.setDate.bind(this);
  }

  componentDidMount() {
    this.GetLocationInfo();
  }

  showModal(visible) {
    this.setState({ modalShown: visible });
  }

  GetLocationInfo = async () => {
    this.setState({ loading: true });
    let result = await GetData(null, Adresses.Location.GetAll);
    if (result) {
      if (result.success) {
        this.setState({
          LocationInfo: result.data,
          loading: false,
        });
      } else {
        this.setState({ loading: false });
        ShowToast(result.message, "danger");
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Servise Bağlanılamadı!", "danger");
    }
  };

  Query = async () => {
    await this.setState({
      loading: true,
      inputData: {
        firstDate: this.state.firstDate,
        puLocationID: this.state.puLocationID,
      },
    });
    if ((this.state.firstDate && this.state.puLocationID) != null) {
      var result = await GetData(this.state.inputData, Adresses.TypeThree.Two);
      if (result) {
        if (result.success) {
          await this.setState({
            Data: result.data,
            loading: false,
          });
          this.showModal(true);
          ShowToast(result.message, "success");
        } else {
          this.setState({ loading: false });
          ShowToast(result.message, "danger");
        }
      } else {
        this.setState({ loading: false });
        ShowToast("Servise Bağlanılamadı!", "danger");
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Değerler boş bırakılamaz.", "warning");
    }
  };

  fitToMarkers = () => {
    var temp = [];
    this.state.Data.forEach((p) => {
      temp.push(p.puLocationCoordinate);
      temp.push(p.doLocationCoordinate);
    });
    this.mapRef.fitToCoordinates(temp, {
      edgePadding: { top: 150, right: 150, bottom: 150, left: 150 },
      animated: true,
    });
  };

  showMode = () => {
    this.setState({ showDatePicker: true });
  };

  setDate(e, newDate) {
    const currentDate = newDate || new Date("2020-12-01");
    this.setState({ firstDate: currentDate, showDatePicker: false });
  }

  async onValueChange(value) {
    await this.setState({
      puLocationID: Number(this.state.LocationInfo[value].locationId),
      selectedLocation: value,
    });
  }

  render() {
    return (
      <Root>
        <Container style={styles.container}>
          <Content style={styles.body}>
            <View style={styles.header}>
              <Card>
                <CardItem style={{ backgroundColor: "#e85f5f" }}>
                  <Body>
                    <Text
                      style={{
                        fontSize: 20,
                        color: "white",
                        fontWeight: "bold",
                      }}
                    >
                      Belirli bir günde aynı konumdan hareket eden araçların
                      rasgele 5’inin yolunun çizilmesi
                    </Text>
                  </Body>
                </CardItem>
              </Card>
              <Card>
                <CardItem style={{ backgroundColor: "#e85f5f" }}>
                  <Body>
                    <Form style={{ alignSelf: "stretch" }}>
                      <Text
                        style={{
                          fontSize: 20,
                          color: "white",
                          fontWeight: "bold",
                        }}
                      >
                        Tarih seçiniz :
                      </Text>
                      <Item full style={{ marginBottom: 10, marginLeft: 0 }}>
                        <Icon
                          color="white"
                          style={{ fontSize: 30 }}
                          name="calendar"
                        />
                        <Input
                          style={{
                            color: "white",
                            fontSize: 18,
                            marginLeft: 10,
                          }}
                          value={ParseDate(this.state.firstDate)}
                          placeholderTextColor="white"
                          placeholder="Tarih"
                        />
                      </Item>
                      <Button
                        full
                        style={{ backgroundColor: "#FFF", marginBottom: 10 }}
                        onPress={() => this.showMode()}
                      >
                        <Text
                          style={{
                            color: "#e85f5f",
                            fontSize: 18,
                            fontWeight: "bold",
                          }}
                        >
                          Tarih Seç
                        </Text>
                      </Button>
                      <Text
                        style={{
                          fontSize: 20,
                          color: "white",
                          fontWeight: "bold",
                          marginBottom: 10,
                        }}
                      >
                        Lokasyon seçiniz :
                      </Text>
                      <Item full style={{ marginBottom: 10, marginLeft: 0 }}>
                        <Icon
                          color="white"
                          style={{ fontSize: 30 }}
                          name="map-marker"
                        />
                        <Picker
                          style={{
                            height: 50,
                            color: "white",
                            marginLeft: 10,
                            fontSize: 23,
                          }}
                          mode="dropdown"
                          selectedValue={this.state.selectedLocation}
                          onValueChange={this.onValueChange.bind(this)}
                        >
                          {Object.keys(this.state.LocationInfo).map((key) => {
                            return (
                              <Picker.Item
                                label={
                                  this.state.LocationInfo[key].locationId +
                                  " ) " +
                                  this.state.LocationInfo[key].borough +
                                  " - " +
                                  this.state.LocationInfo[key].zone
                                }
                                value={key}
                                key={key}
                              />
                            );
                          })}
                        </Picker>
                      </Item>
                      <Button
                        full
                        style={{ backgroundColor: "#FFF" }}
                        onPress={() => this.Query()}
                      >
                        <Text
                          style={{
                            color: "#e85f5f",
                            fontSize: 18,
                            fontWeight: "bold",
                          }}
                        >
                          Görüntüle
                        </Text>
                      </Button>
                    </Form>
                  </Body>
                </CardItem>
              </Card>
            </View>
            <View style={{ width: "100%", height: "100%" }}>
              {this.state.modalShown && this.state.Data.length != 0 && (
                <Modal
                  animationType="slide"
                  transparent={true}
                  visible={this.state.modalShown}
                  onRequestClose={() => {
                    this.mapRef = null;
                    this.setState({ modalShown: false });
                  }}
                >
                  <MapView
                    ref={(ref) => {
                      this.mapRef = ref;
                    }}
                    provider={PROVIDER_GOOGLE}
                    style={{ width: "100%", height: "100%" }}
                    onMapReady={() => this.fitToMarkers()}
                  >
                    <Marker
                      pinColor={"blue"}
                      coordinate={this.state.Data[0].puLocationCoordinate}
                      title={"Başlangıç Konumu"}
                      description={this.state.Data[0].puLocation}
                    />
                    {this.state.Data != null &&
                      this.state.Data.length != 0 &&
                      Object.values(this.state.Data).map((key, index) => {
                        return (
                          <View key={index}>
                            <MapViewDirections
                              origin={key.puLocationCoordinate}
                              destination={key.doLocationCoordinate}
                              apikey={GOOGLE_MAPS_APIKEY}
                              strokeWidth={3}
                              strokeColor={
                                this.state.colors[
                                  index % this.state.colors.length
                                ]
                              }
                            />

                            <Marker
                              pinColor={"red"}
                              coordinate={key.doLocationCoordinate}
                              title={"Varış Konumu"}
                              description={key.doLocation}
                            />
                          </View>
                        );
                      })}
                  </MapView>
                </Modal>
              )}
            </View>
          </Content>
          {this.state.showDatePicker && (
            <DateTimePicker
              defaultDate={new Date("2020-12-01")}
              minimumDate={new Date("2020-12-01")}
              maximumDate={new Date("2020-12-31")}
              testID="Date"
              value={this.state.firstDate}
              mode="date"
              is24Hour={true}
              display="spinner"
              onChange={this.setDate}
            />
          )}
          {this.state.loading && (
            <View
              style={{
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                flex: 1,
                justifyContent: "center",
                alignItems: "center",
                backgroundColor: "rgba(0,0,0,0.2)",
              }}
            >
              <Spinner color="red" />
            </View>
          )}
          <StatusBar style="light" />
        </Container>
      </Root>
    );
  }
}

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: "#deded5",
    height: "100%",
  },
  body: {
    flex: 1,
    padding: 10,
    height: "100%",
  },
  header: {
    marginBottom: 10,
  },
});

/* ---------------------------------------------- */ 
import React from "react";
import { View, StyleSheet, ScrollView, TouchableOpacity } from "react-native";
import Constants from "expo-constants";
import Dimensions from "react-native";
import {
  Container,
  Header,
  Content,
  Card,
  CardItem,
  Text,
  Body,
} from "native-base";

const MenuTwo = ({ navigation }) => {
  return (
    <Container style={styles.container}>
      <View style={styles.body}>
        <View style={styles.header}>
          <TouchableOpacity>
            <Card>
              <CardItem header style={{ backgroundColor: "#e85f5f" }}>
                <Text
                  style={{ fontSize: 25, color: "white", fontWeight: "bold" }}
                >
                  Sorgular : Tip 2
                </Text>
              </CardItem>
            </Card>
          </TouchableOpacity>
        </View>

        <ScrollView style={styles.scrollView}>
          <TouchableOpacity onPress={() => navigation.navigate("QueryTwoOne")}>
            <Card>
              <CardItem header>
                <Text style={styles.hText}>1.Madde</Text>
              </CardItem>
              <CardItem>
                <Body>
                  <Text style={styles.text}>
                    İki tarih arasında belirli bir lokasyondan hareket eden araç
                    sayısı
                  </Text>
                </Body>
              </CardItem>
            </Card>
          </TouchableOpacity>

          <TouchableOpacity onPress={() => navigation.navigate("QueryTwoTwo")}>
            <Card>
              <CardItem header>
                <Text style={styles.hText}>2.Madde</Text>
              </CardItem>
              <CardItem>
                <Body>
                  <Text style={styles.text}>
                    Günlük seyahat başına düşen ortalama alınan ücretlere göre;
                    en az ücret alınan iki tarih arasındaki günlük alınan
                    ortalama ücretler
                  </Text>
                </Body>
              </CardItem>
            </Card>
          </TouchableOpacity>

          <TouchableOpacity
            onPress={() => navigation.navigate("QueryTwoThree")}
          >
            <Card>
              <CardItem header>
                <Text style={styles.hText}>3.Madde</Text>
              </CardItem>
              <CardItem>
                <Body>
                  <Text style={styles.text}>
                    İki tarih arasında seyahat edilen en az mesafeli 5 yolculuk
                  </Text>
                </Body>
              </CardItem>
            </Card>
          </TouchableOpacity>
        </ScrollView>
      </View>
    </Container>
  );
};
export default MenuTwo;

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#deded5",
  },
  body: {
    flex: 1,
    top: Constants.statusBarHeight,
    padding: 10,
    paddingBottom: 30,
  },
  header: {
    marginBottom: 10,
  },
  scrollView: {
    flex: 1,
    marginBottom: 10,
  },
  hText: {
    fontSize: 25,
    color: "#1c1c1b",
  },
  text: {
    fontSize: 22,
    color: "#1c1c1b",
  },
});

/* ---------------------------------------------- */ 
import React from "react";
import { StatusBar } from "expo-status-bar";
import { View, StyleSheet, ScrollView } from "react-native";
import {
  Container,
  Card,
  CardItem,
  Text,
  Body,
  Item,
  Input,
  Button,
  Form,
  Picker,
  Spinner,
  Content,
  Root,
} from "native-base";
import {
  Adresses,
  GetData,
  ParseDate,
  ShowToast,
} from "../../services/db-services";
import { Row, Grid } from "react-native-easy-grid";
import Icon from "react-native-vector-icons/FontAwesome";
import DateTimePicker from "@react-native-community/datetimepicker";

export default class QueryTwoOne extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: false,
      LocationInfo: {},
      Data: null,
      inputData: {
        firstDate: new Date(),
        secondDate: new Date(),
        puLocationID: new Number(),
      },
      selectedLocation: "0",

      firstDate: new Date("2020-12-01"),
      secondDate: new Date("2020-12-31"),
      puLocationID: 0,

      showDatePicker: false,
      selectedDate: 0, // 0 first, 1 second
    };
    this.setDate = this.setDate.bind(this);
  }

  componentDidMount() {
    this.GetLocationInfo();
  }

  GetLocationInfo = async () => {
    await this.setState({ loading: true });
    var result = await GetData(null, Adresses.Location.GetAll);
    if (result) {
      if (result.success) {
        this.setState({
          LocationInfo: result.data,
          loading: false,
        });
        this.setState({ loading: false });
      } else {
        this.setState({ loading: false });
        ShowToast(result.message, "danger");
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Servise Bağlanılamadı.", "danger");
    }
  };

  Query = async () => {
    await this.setState({ loading: true });
    if (
      (this.state.firstDate &&
        this.state.secondDate &&
        this.state.puLocationID) != null
    ) {
      await this.setState({
        inputData: {
          firstDate: this.state.firstDate,
          secondDate: this.state.secondDate,
          puLocationID: this.state.puLocationID,
        },
      });
      var result = await GetData(this.state.inputData, Adresses.TypeTwo.One);
      if (result) {
        if (result.success) {
          this.setState({
            Data: result.data,
            loading: false,
          });
          this.setState({ loading: false });
          ShowToast(result.message, "success");
        } else {
          this.setState({ loading: false });
          ShowToast(result.message, "danger");
        }
      } else {
        this.setState({ loading: false });
        ShowToast("Servise Bağlanılamadı.", "danger");
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Değerler boş bırakılamaz.", "warning");
    }
  };

  async onValueChange(value) {
    await this.setState({
      puLocationID: Number(this.state.LocationInfo[value].locationId),
      selectedLocation: value,
    });
  }

  setDate(e, newDate) {
    const currentDate = newDate || new Date();
    if (this.state.selectedDate == 0) {
      this.setState({ firstDate: currentDate, showDatePicker: false });
      if (this.state.secondDate.getDate() < this.state.firstDate.getDate())
        this.setState({ secondDate: currentDate });
    } else this.setState({ secondDate: currentDate, showDatePicker: false });
  }

  showMode = (props) => {
    this.setState({ selectedDate: props, showDatePicker: true });
  };

  render() {
    return (
      <Root>
        <Container style={styles.container}>
          <Content style={styles.body}>
            <ScrollView style={styles.scrollView}>
              <View style={styles.header}>
                <Card>
                  <CardItem style={{ backgroundColor: "#e85f5f" }}>
                    <Body>
                      <Text
                        style={{
                          fontSize: 20,
                          color: "white",
                          fontWeight: "bold",
                        }}
                      >
                        İki tarih arasında belirli bir lokasyondan hareket eden
                        araç sayısı
                      </Text>
                    </Body>
                  </CardItem>
                </Card>
                <Card>
                  <CardItem
                    header
                    style={{
                      backgroundColor: "#e85f5f",
                      flexDirection: "column",
                    }}
                  >
                    <Body>
                      <Form style={{ alignSelf: "stretch" }}>
                        <Text
                          style={{
                            fontSize: 20,
                            color: "white",
                            fontWeight: "bold",
                          }}
                        >
                          Birinci tarihi seçiniz :
                        </Text>
                        <Item full style={{ marginBottom: 10, marginLeft: 0 }}>
                          <Icon
                            color="white"
                            style={{ fontSize: 30 }}
                            name="calendar"
                          />
                          <Input
                            style={{
                              color: "white",
                              fontSize: 18,
                              marginLeft: 10,
                            }}
                            value={ParseDate(this.state.firstDate)}
                            placeholderTextColor="white"
                            placeholder="Birinci Tarih"
                          />
                        </Item>
                        <Button
                          full
                          style={{ backgroundColor: "#FFF", marginBottom: 10 }}
                          onPress={() => this.showMode(0)}
                        >
                          <Text
                            style={{
                              color: "#e85f5f",
                              fontSize: 18,
                              fontWeight: "bold",
                            }}
                          >
                            Tarih Seç
                          </Text>
                        </Button>

                        <Text
                          style={{
                            fontSize: 20,
                            color: "white",
                            fontWeight: "bold",
                          }}
                        >
                          İkinci tarihi seçiniz :
                        </Text>
                        <Item full style={{ marginBottom: 10, marginLeft: 0 }}>
                          <Icon
                            color="white"
                            style={{ fontSize: 30 }}
                            name="calendar"
                          />
                          <Input
                            style={{
                              color: "white",
                              fontSize: 18,
                              marginLeft: 10,
                            }}
                            value={ParseDate(this.state.secondDate)}
                            placeholderTextColor="white"
                            placeholder="İkinci Tarih"
                          />
                        </Item>
                        <Button
                          full
                          style={{ backgroundColor: "#FFF", marginBottom: 10 }}
                          onPress={() => this.showMode(1)}
                        >
                          <Text
                            style={{
                              color: "#e85f5f",
                              fontSize: 18,
                              fontWeight: "bold",
                            }}
                          >
                            Tarih Seç
                          </Text>
                        </Button>

                        <Text
                          style={{
                            fontSize: 20,
                            color: "white",
                            fontWeight: "bold",
                            marginBottom: 10,
                          }}
                        >
                          Lokasyon seçiniz :
                        </Text>
                        <Item full style={{ marginBottom: 10, marginLeft: 0 }}>
                          <Icon
                            color="white"
                            style={{ fontSize: 30 }}
                            name="map-marker"
                          />
                          <Picker
                            style={{
                              height: 50,
                              color: "white",
                              marginLeft: 10,
                              fontSize: 23,
                            }}
                            mode="dropdown"
                            selectedValue={this.state.selectedLocation}
                            onValueChange={this.onValueChange.bind(this)}
                          >
                            {Object.keys(this.state.LocationInfo).map((key) => {
                              return (
                                <Picker.Item
                                  label={
                                    this.state.LocationInfo[key].locationId +
                                    " ) " +
                                    this.state.LocationInfo[key].borough +
                                    " - " +
                                    this.state.LocationInfo[key].zone
                                  }
                                  value={key}
                                  key={key}
                                />
                              );
                            })}
                          </Picker>
                        </Item>
                        <Button
                          full
                          style={{ backgroundColor: "#FFF" }}
                          onPress={() => this.Query()}
                        >
                          <Text
                            style={{
                              color: "#e85f5f",
                              fontSize: 18,
                              fontWeight: "bold",
                            }}
                          >
                            Sorgula
                          </Text>
                        </Button>
                      </Form>
                    </Body>
                  </CardItem>
                </Card>
              </View>
              <View style={{ flex: 1 }}>
                {this.state.Data != null &&
                  this.state.Data.map((p, key) => {
                    return (
                      <Card key={key}>
                        <CardItem header>
                          <Text style={{ fontSize: 20, fontWeight: "bold" }}>
                            {key + 1}. Kayıt
                          </Text>
                        </CardItem>
                        <CardItem>
                          <Body>
                            <Grid>
                              <Row>
                                <Text
                                  style={{
                                    marginBottom: 5,
                                    fontSize: 18,
                                    fontWeight: "bold",
                                  }}
                                >
                                  Toplam Taksi sayısı
                                </Text>
                              </Row>
                              <Row>
                                <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                  {p.taxi_count}
                                </Text>
                              </Row>
                            </Grid>
                          </Body>
                        </CardItem>
                      </Card>
                    );
                  })}
              </View>
            </ScrollView>
            {this.state.showDatePicker && (
              <DateTimePicker
                defaultDate={
                  this.state.selectedDate == 1
                    ? this.state.firstDate
                    : new Date("2020-12-01")
                }
                minimumDate={
                  this.state.selectedDate == 1
                    ? this.state.firstDate
                    : new Date("2020-12-01")
                }
                maximumDate={new Date("2020-12-31")}
                testID="Date"
                value={
                  this.state.selectedDate == 0
                    ? this.state.firstDate
                    : this.state.secondDate
                }
                mode="date"
                is24Hour={true}
                display="spinner"
                onChange={this.setDate}
              />
            )}
          </Content>
          {this.state.loading && (
            <View
              style={{
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                flex: 1,
                justifyContent: "center",
                alignItems: "center",
                backgroundColor: "rgba(0,0,0,0.3)",
              }}
            >
              <Spinner color="red" />
            </View>
          )}
          <StatusBar style="light" />
        </Container>
      </Root>
    );
  }
}

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: "#deded5",
  },
  body: {
    flex: 1,
    padding: 10,
    paddingBottom: 30,
  },
  header: {
    marginBottom: 10,
  },
  scrollView: {
    flex: 1,
  },
});

/* ---------------------------------------------- */ 
import React from "react";
import { StatusBar } from "expo-status-bar";
import { View, StyleSheet, ScrollView } from "react-native";
import {
  Container,
  Card,
  CardItem,
  Text,
  Body,
  Item,
  Input,
  Button,
  Form,
  Spinner,
  Content,
  Root,
} from "native-base";
import {
  Adresses,
  GetData,
  ParseDate,
  ShowToast,
} from "../../services/db-services";
import { Row, Grid } from "react-native-easy-grid";
import Icon from "react-native-vector-icons/FontAwesome";
import DateTimePicker from "@react-native-community/datetimepicker";

export default class QueryTwoOne extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: false,
      Data: null,
      inputData: {
        firstDate: new Date(),
        secondDate: new Date(),
      },

      firstDate: new Date(2020, 11, 1),
      secondDate: new Date(2020, 11, 31),

      show: false,
      selectedDate: 0, // 0 first, 1 second
    };
    this.setDate = this.setDate.bind(this);
  }

  Query = async () => {
    await this.setState({ loading: true });
    if ((this.state.firstDate && this.state.secondDate) != null) {
      await this.setState({
        inputData: {
          firstDate: this.state.firstDate,
          secondDate: this.state.secondDate,
        },
      });
      var result = await GetData(this.state.inputData, Adresses.TypeTwo.Three);
      if (result) {
        if (result.success) {
          this.setState({
            Data: result.data,
            loading: false,
          });
          this.setState({ loading: false });
          ShowToast(result.message, "success");
        } else {
          this.setState({ loading: false });
          ShowToast(result.message, "danger");
        }
      } else {
        this.setState({ loading: false });
        ShowToast("Servise Bağlanılamadı.", "danger");
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Değerler boş bırakılamaz.", "warning");
    }
  };

  setDate(e, newDate) {
    const currentDate = newDate || new Date();
    if (this.state.selectedDate == 0) {
      this.setState({ firstDate: currentDate, show: false });
      if (this.state.secondDate.getDate() < this.state.firstDate.getDate())
        this.setState({ secondDate: currentDate });
    } else this.setState({ secondDate: currentDate, show: false });
  }

  showMode = (props) => {
    this.setState({ selectedDate: props, show: true });
  };

  render() {
    return (
      <Root>
        <Container style={styles.container}>
          <Content style={styles.body}>
            <ScrollView style={styles.scrollView}>
              <View style={styles.header}>
                <Card>
                  <CardItem style={{ backgroundColor: "#e85f5f" }}>
                    <Body>
                      <Text
                        style={{
                          fontSize: 20,
                          color: "white",
                          fontWeight: "bold",
                        }}
                      >
                        İki tarih arasında seyahat edilen en az mesafeli 5
                        yolculuk
                      </Text>
                    </Body>
                  </CardItem>
                </Card>
                <Card>
                  <CardItem
                    header
                    style={{
                      backgroundColor: "#e85f5f",
                      flexDirection: "column",
                    }}
                  >
                    <Body>
                      <Form style={{ alignSelf: "stretch" }}>
                        <Text
                          style={{
                            fontSize: 20,
                            color: "white",
                            fontWeight: "bold",
                          }}
                        >
                          Birinci tarihi seçiniz :
                        </Text>
                        <Item full style={{ marginBottom: 10, marginLeft: 0 }}>
                          <Icon
                            color="white"
                            style={{ fontSize: 30 }}
                            name="calendar"
                          />
                          <Input
                            style={{
                              color: "white",
                              fontSize: 18,
                              marginLeft: 10,
                            }}
                            value={ParseDate(this.state.firstDate)}
                            placeholderTextColor="white"
                            placeholder="Birinci Tarih"
                          />
                        </Item>
                        <Button
                          full
                          style={{ backgroundColor: "#FFF", marginBottom: 10 }}
                          onPress={() => this.showMode(0)}
                        >
                          <Text
                            style={{
                              color: "#e85f5f",
                              fontSize: 18,
                              fontWeight: "bold",
                            }}
                          >
                            Tarih Seç
                          </Text>
                        </Button>

                        <Text
                          style={{
                            fontSize: 20,
                            color: "white",
                            fontWeight: "bold",
                          }}
                        >
                          İkinci tarihi seçiniz :
                        </Text>
                        <Item full style={{ marginBottom: 10, marginLeft: 0 }}>
                          <Icon
                            color="white"
                            style={{ fontSize: 30 }}
                            name="calendar"
                          />
                          <Input
                            style={{
                              color: "white",
                              fontSize: 18,
                              marginLeft: 10,
                            }}
                            value={ParseDate(this.state.secondDate)}
                            placeholderTextColor="white"
                            placeholder="İkinci Tarih"
                          />
                        </Item>
                        <Button
                          full
                          style={{ backgroundColor: "#FFF", marginBottom: 10 }}
                          onPress={() => this.showMode(1)}
                        >
                          <Text
                            style={{
                              color: "#e85f5f",
                              fontSize: 18,
                              fontWeight: "bold",
                            }}
                          >
                            Tarih Seç
                          </Text>
                        </Button>
                        <Button
                          full
                          style={{ backgroundColor: "#FFF" }}
                          onPress={() => this.Query()}
                        >
                          <Text
                            style={{
                              color: "#e85f5f",
                              fontSize: 18,
                              fontWeight: "bold",
                            }}
                          >
                            Sorgula
                          </Text>
                        </Button>
                      </Form>
                    </Body>
                  </CardItem>
                </Card>
              </View>
              <View style={{ flex: 1 }}>
                {this.state.Data != null &&
                  this.state.Data.map((p, key) => {
                    return (
                      <Card key={key}>
                        <CardItem header>
                          <Text style={{ fontSize: 20, fontWeight: "bold" }}>
                            {key + 1}. Kayıt
                          </Text>
                        </CardItem>
                        <CardItem>
                          <Body>
                            <Grid>
                              <Row>
                                <Text
                                  style={{
                                    marginBottom: 5,
                                    fontSize: 18,
                                    fontWeight: "bold",
                                  }}
                                >
                                  Yolcunun alındığı tarih
                                </Text>
                              </Row>
                              <Row>
                                <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                  {ParseDate(new Date(p.puDatetime), true)}
                                </Text>
                              </Row>
                              <Row>
                                <Text
                                  style={{
                                    marginBottom: 5,
                                    fontSize: 18,
                                    fontWeight: "bold",
                                  }}
                                >
                                  Yolcunun indirildiği tarih
                                </Text>
                              </Row>
                              <Row>
                                <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                  {ParseDate(new Date(p.doDatetime), true)}
                                </Text>
                              </Row>
                              <Row>
                                <Text
                                  style={{
                                    marginBottom: 5,
                                    fontSize: 18,
                                    fontWeight: "bold",
                                  }}
                                >
                                  Yolculuk mesafesi
                                </Text>
                              </Row>
                              <Row>
                                <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                  {p.trip_distance} Mil
                                </Text>
                              </Row>
                            </Grid>
                          </Body>
                        </CardItem>
                      </Card>
                    );
                  })}
              </View>
            </ScrollView>
            {this.state.show && (
              <DateTimePicker
                defaultDate={
                  this.state.selectedDate == 1
                    ? this.state.firstDate
                    : new Date(2020, 11, 1)
                }
                minimumDate={
                  this.state.selectedDate == 1
                    ? this.state.firstDate
                    : new Date(2020, 11, 1)
                }
                maximumDate={new Date(2020, 11, 31)}
                testID="Date"
                value={
                  this.state.selectedDate == 0
                    ? this.state.firstDate
                    : this.state.secondDate
                }
                mode="date"
                is24Hour={true}
                display="spinner"
                onChange={this.setDate}
              />
            )}
          </Content>
          {this.state.loading && (
            <View
              style={{
                position: "absolute",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                flex: 1,
                justifyContent: "center",
                alignItems: "center",
                backgroundColor: "rgba(0,0,0,0.5)",
              }}
            >
              <Spinner color="red" />
            </View>
          )}
          <StatusBar style="light" />
        </Container>
      </Root>
    );
  }
}

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: "#deded5",
  },
  body: {
    flex: 1,
    padding: 10,
    paddingBottom: 30,
  },
  header: {
    marginBottom: 10,
  },
  scrollView: {
    flex: 1,
  },
});

/* ---------------------------------------------- */ 
import React from "react";
import { StatusBar } from "expo-status-bar";
import { View, StyleSheet, ScrollView } from "react-native";
import {
  Container,
  Card,
  CardItem,
  Text,
  Body,
  Spinner,
  Content,
  Root,
} from "native-base";
import { Row, Grid } from "react-native-easy-grid";
import { Adresses, GetData, ParseDate, ShowToast } from "../../services/db-services";

export default class QueryTwoTwo extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: false,
      Data: null,
    };
  }

  componentDidMount() {
    this.Query();
  }

  Query = async () => {
    await this.setState({ loading: true });
    var result = await GetData(null, Adresses.TypeTwo.Two);
    if (result) {
      if (result.success) {
        this.setState({
          Data: result.data,
          loading: false,
        });
        this.setState({ loading: false });
        ShowToast(result.message,'success');
      } else {
        this.setState({ loading: false });
        ShowToast(result.message,'danger');
      }
    } else {
      this.setState({ loading: false });
      ShowToast("Servise Bağlanılamadı.",'danger');
    }
  };

  render() {
    return (
      <Root>
      <Container style={styles.container}>
        <Content style={styles.body}>
          <ScrollView style={styles.scrollView}>
            <View style={styles.header}>
              <Card>
                <CardItem style={{ backgroundColor: "#e85f5f" }}>
                  <Body>
                    <Text
                      style={{
                        fontSize: 20,
                        color: "white",
                        fontWeight: "bold",
                      }}
                    >
                      Günlük seyahat başına düşen ortalama alınan ücretlere
                      göre; en az ücret alınan iki tarih arasındaki günlük
                      alınan ortalama ücretler
                    </Text>
                  </Body>
                </CardItem>
              </Card>
            </View>
            <View style={{ flex: 1 }}>
              {this.state.Data != null &&
                this.state.Data.map((p, key) => {
                  return (
                    <Card key={key}>
                      <CardItem header>
                        <Text style={{ fontSize: 20, fontWeight: "bold" }}>
                          {key + 1}. Kayıt
                        </Text>
                      </CardItem>
                      <CardItem>
                        <Body>
                          <Grid>
                            <Row>
                              <Text
                                style={{
                                  marginBottom: 5,
                                  fontSize: 18,
                                  fontWeight: "bold",
                                }}
                              >
                                Yolcuların yolculuk ettiği tarih
                              </Text>
                            </Row>
                            <Row>
                              <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                {ParseDate(new Date(p.puDatetime))}
                              </Text>
                            </Row>
                            <Row>
                              <Text
                                style={{
                                  marginBottom: 5,
                                  fontSize: 18,
                                  fontWeight: "bold",
                                }}
                              >
                                Günlük ortalama alınan ücret
                              </Text>
                            </Row>
                            <Row>
                              <Text style={{ marginBottom: 5, fontSize: 18 }}>
                                {p.total_amount_average}
                              </Text>
                            </Row>
                          </Grid>
                        </Body>
                      </CardItem>
                    </Card>
                  );
                })}
            </View>
          </ScrollView>
        </Content>
        {this.state.loading && (
          <View
            style={{
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              flex: 1,
              justifyContent: "center",
              alignItems: "center",
              backgroundColor: "rgba(0,0,0,0.5)",
            }}
          >
            <Spinner color="red" />
          </View>
        )}
        <StatusBar style="light" />
      </Container>
      </Root>
    );
  }
}

const styles = new StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: "#deded5",
  },
  body: {
    flex: 1,
    padding: 10,
    paddingBottom: 30,
  },
  header: {
    marginBottom: 10,
  },
  scrollView: {
    flex: 1,
  },
});

/* ---------------------------------------------- */ 
import { Toast } from "native-base";

const ApiUrl = "https://yazlab22.somee.com";
const Adresses = {
  TypeOne: {
    One: "/api/exampleonequeries/queryone",
    Two: "/api/exampleonequeries/querytwo",
    Three: "/api/exampleonequeries/querythree",
  },
  TypeTwo: {
    One: "/api/exampletwoqueries/queryone",
    Two: "/api/exampletwoqueries/querytwo",
    Three: "/api/exampletwoqueries/querythree",
  },
  TypeThree: {
    One: "/api/examplethreequeries/queryone",
    Two: "/api/examplethreequeries/querytwo",
    Three: "/api/examplethreequeries/querythree",
  },
  Location: {
    GetAll: "/api/location/all",
  },
};
const GOOGLE_MAPS_APIKEY = "AIzaSyCOA7g0o-KcAnxg7C_d74h8quV_Ffsc4Ng";
const toastStyle = {
  danger:{
    toast:{
      backgroundColor:'red', 
    },
    text:{
      color:'white',
      fontSize:18,
      fontWeight:'bold', 
    }
  },
  success:{
    toast:{
      backgroundColor:'green',
    },
    text:{
      color:'white',
      fontSize:18,
      fontWeight:'bold',
    }
  },
  warning:{
    toast:{
      backgroundColor:'orange',
    },
    text:{
      color:'black',
      fontSize:18,
      fontWeight:'bold',
    }
  }
}

const GetData = async (data, adress) => {
  return fetch(ApiUrl + adress, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    redirect: "follow",
    body: JSON.stringify(data),
  })
    .then((response) => response.json())
    .then((json) => {
      return json;
    })
    .catch((error) => console.error(error));
};

function ParseDate(date, withTime = false) {
  var day = "0" + date.getDate();
  var mount = "0" + (date.getMonth() + 1);
  var year = date.getFullYear();
  var hour = "0" + date.getHours();
  var min = "0" + date.getMinutes();
  var sec = "0" + date.getSeconds();
  if (withTime)
    return (
      hour.substr(-2) +
      ":" +
      min.substr(-2) +
      ":" +
      sec.substr(-2) +
      "  " +
      day.substr(-2) +
      "-" +
      mount.substr(-2) +
      "-" +
      year
    );
  return day.substr(-2) + "-" + mount.substr(-2) + "-" + year;
}

function ShowToast(message, status='success'){
  Toast.show({
    text: message,
    duration: status=='success' ? 1000 : 2000,
    style: toastStyle[status].toast,
    textStyle: toastStyle[status].text,
  });
};

export { Adresses, GetData, ShowToast, GOOGLE_MAPS_APIKEY, ParseDate };

/* ---------------------------------------------- */ 
import React from 'react';
import { StatusBar } from 'expo-status-bar';
import { NavigationContainer } from '@react-navigation/native';
import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';
import BottomTabBar from './src/components/bottomTabBar';
import { View,Text } from 'native-base';
import * as Font from 'expo-font';
import { Ionicons } from '@expo/vector-icons';

const Tabs = createMaterialBottomTabNavigator();

export default class App extends React .Component {
  constructor(props){
    super(props)
    this.state = {
      isReady: false,
    };
  }

  async componentDidMount() {
    await Font.loadAsync({
      Roboto: require('native-base/Fonts/Roboto.ttf'),
      Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf'),
      ...Ionicons.font,
    });
    this.setState({ isReady: true });
  }

  render(){
    if (!this.state.isReady) {
      return (<View style={{flex:1,flexDirection:'column',justifyContent:'center',alignItems:'center'}}></View>);
    }
    else{
      return (
        <NavigationContainer>
          <BottomTabBar/>
          <StatusBar style="dark" />
        </NavigationContainer>
    );
    }    
  }
};
/* ---------------------------------------------- */ 
{
  "main": "node_modules/expo/AppEntry.js",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "eject": "expo eject"
  },
  "dependencies": {
    "@expo/webpack-config": "^0.12.66",
    "@react-native-community/masked-view": "0.1.10",
    "@react-navigation/material-bottom-tabs": "^5.3.15",
    "@react-navigation/native": "^5.9.4",
    "@react-navigation/stack": "^5.14.4",
    "expo": "~41.0.0",
    "expo-font": "~9.1.0",
    "expo-status-bar": "~1.0.4",
    "native-base": "^2.15.2",
    "react": "16.13.1",
    "react-dom": "16.13.1",
    "react-native": "https://github.com/expo/react-native/archive/sdk-41.0.0.tar.gz",
    "react-native-gesture-handler": "~1.10.2",
    "react-native-maps": "0.27.1",
    "react-native-maps-directions": "^1.8.0",
    "react-native-paper": "^4.7.2",
    "react-native-reanimated": "~2.1.0",
    "react-native-safe-area-context": "3.2.0",
    "react-native-screens": "~3.0.0",
    "react-native-vector-icons": "^7.1.0",
    "react-native-web": "~0.13.12"
  },
  "devDependencies": {
    "@babel/core": "^7.9.0"
  },
  "private": true
}

/* ---------------------------------------------- */ 

